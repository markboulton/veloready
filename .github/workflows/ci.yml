name: CI - Single Developer Optimized

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Tier 1: Fast feedback on every push (5-8 minutes)
  quick_validation:
    runs-on: macos-14
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj') }}
          restore-keys: |
            ${{ runner.os }}-xcode-
            
      - name: Create and Boot Simulator
        run: |
          # List available runtimes and device types
          echo "=== Available Runtimes ==="
          xcrun simctl list runtimes
          echo "=== Available iPhone Device Types ==="
          xcrun simctl list devicetypes | grep iPhone
          
          # Try to create simulator with different approaches
          echo "=== Creating Simulator ==="
          SIMULATOR_ID=""
          
          # Try iPhone 15 with different iOS versions
          if SIMULATOR_ID=$(xcrun simctl create "Test Simulator" "iPhone 15" "com.apple.CoreSimulator.SimRuntime.iOS-18-2" 2>/dev/null); then
            echo "Created simulator with iPhone 15 + iOS 18.2: $SIMULATOR_ID"
          elif SIMULATOR_ID=$(xcrun simctl create "Test Simulator" "iPhone 15" "com.apple.CoreSimulator.SimRuntime.iOS-17-5" 2>/dev/null); then
            echo "Created simulator with iPhone 15 + iOS 17.5: $SIMULATOR_ID"
          elif SIMULATOR_ID=$(xcrun simctl create "Test Simulator" "iPhone 14" "com.apple.CoreSimulator.SimRuntime.iOS-18-2" 2>/dev/null); then
            echo "Created simulator with iPhone 14 + iOS 18.2: $SIMULATOR_ID"
          elif SIMULATOR_ID=$(xcrun simctl create "Test Simulator" "iPhone 14" "com.apple.CoreSimulator.SimRuntime.iOS-17-5" 2>/dev/null); then
            echo "Created simulator with iPhone 14 + iOS 17.5: $SIMULATOR_ID"
          else
            echo "Failed to create simulator, trying to use existing ones..."
            # List existing simulators
            xcrun simctl list devices | grep "Test Simulator" || echo "No Test Simulator found"
          fi
          
          # Boot the simulator
          echo "=== Booting Simulator ==="
          xcrun simctl boot "Test Simulator" || echo "Failed to boot Test Simulator"
          
          # List all devices to see what's available
          echo "=== Available Devices ==="
          xcrun simctl list devices
          
      - name: Build Check
        run: |
          # Try with Test Simulator first, fallback to generic if it doesn't exist
          if xcrun simctl list devices | grep -q "Test Simulator"; then
            echo "Using Test Simulator"
            xcodebuild build \
              -project VeloReady.xcodeproj \
              -scheme VeloReady \
              -destination 'platform=iOS Simulator,name=Test Simulator' \
              -quiet \
              -hideShellScriptEnvironment \
              -skipPackagePluginValidation
          else
            echo "Test Simulator not found, using generic destination"
            xcodebuild build \
              -project VeloReady.xcodeproj \
              -scheme VeloReady \
              -destination 'platform=iOS Simulator,OS=latest' \
              -quiet \
              -hideShellScriptEnvironment \
              -skipPackagePluginValidation
          fi
            
      - name: Critical Unit Tests
        run: |
          # Try with Test Simulator first, fallback to generic if it doesn't exist
          if xcrun simctl list devices | grep -q "Test Simulator"; then
            echo "Using Test Simulator for tests"
            xcodebuild test \
              -project VeloReady.xcodeproj \
              -scheme VeloReady \
              -destination 'platform=iOS Simulator,name=Test Simulator' \
              -only-testing:VeloReadyTests/Unit/TrainingLoadCalculatorTests \
              -quiet \
              -hideShellScriptEnvironment
          else
            echo "Test Simulator not found, using generic destination for tests"
            xcodebuild test \
              -project VeloReady.xcodeproj \
              -scheme VeloReady \
              -destination 'platform=iOS Simulator,OS=latest' \
              -only-testing:VeloReadyTests/Unit/TrainingLoadCalculatorTests \
              -quiet \
              -hideShellScriptEnvironment
          fi
            
      - name: Essential Lint
        run: |
          if command -v swiftlint &> /dev/null; then
            swiftlint --quiet --config .swiftlint-essential.yml || echo "Lint issues found (non-blocking)"
          else
            echo "SwiftLint not available"
          fi
          
      - name: Cleanup Simulator
        if: always()
        run: |
          xcrun simctl shutdown "Test Simulator" || true
          xcrun simctl delete "Test Simulator" || true

  # Tier 2: Full confidence before merging (10-15 minutes)
  full_validation:
    runs-on: macos-14
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj') }}
          restore-keys: |
            ${{ runner.os }}-xcode-
            
      - name: Create and Boot Simulator
        run: |
          # List available runtimes and device types
          echo "=== Available Runtimes ==="
          xcrun simctl list runtimes
          echo "=== Available iPhone Device Types ==="
          xcrun simctl list devicetypes | grep iPhone
          
          # Try to create simulator with different approaches
          echo "=== Creating Simulator ==="
          SIMULATOR_ID=""
          
          # Try iPhone 15 with different iOS versions
          if SIMULATOR_ID=$(xcrun simctl create "Test Simulator" "iPhone 15" "com.apple.CoreSimulator.SimRuntime.iOS-18-2" 2>/dev/null); then
            echo "Created simulator with iPhone 15 + iOS 18.2: $SIMULATOR_ID"
          elif SIMULATOR_ID=$(xcrun simctl create "Test Simulator" "iPhone 15" "com.apple.CoreSimulator.SimRuntime.iOS-17-5" 2>/dev/null); then
            echo "Created simulator with iPhone 15 + iOS 17.5: $SIMULATOR_ID"
          elif SIMULATOR_ID=$(xcrun simctl create "Test Simulator" "iPhone 14" "com.apple.CoreSimulator.SimRuntime.iOS-18-2" 2>/dev/null); then
            echo "Created simulator with iPhone 14 + iOS 18.2: $SIMULATOR_ID"
          elif SIMULATOR_ID=$(xcrun simctl create "Test Simulator" "iPhone 14" "com.apple.CoreSimulator.SimRuntime.iOS-17-5" 2>/dev/null); then
            echo "Created simulator with iPhone 14 + iOS 17.5: $SIMULATOR_ID"
          else
            echo "Failed to create simulator, trying to use existing ones..."
            # List existing simulators
            xcrun simctl list devices | grep "Test Simulator" || echo "No Test Simulator found"
          fi
          
          # Boot the simulator
          echo "=== Booting Simulator ==="
          xcrun simctl boot "Test Simulator" || echo "Failed to boot Test Simulator"
          
          # List all devices to see what's available
          echo "=== Available Devices ==="
          xcrun simctl list devices
          
      - name: All Unit Tests
        run: |
          # Try with Test Simulator first, fallback to generic if it doesn't exist
          if xcrun simctl list devices | grep -q "Test Simulator"; then
            echo "Using Test Simulator for unit tests"
            xcodebuild test \
              -project VeloReady.xcodeproj \
              -scheme VeloReady \
              -destination 'platform=iOS Simulator,name=Test Simulator' \
              -only-testing:VeloReadyTests/Unit \
              -quiet \
              -hideShellScriptEnvironment
          else
            echo "Test Simulator not found, using generic destination for unit tests"
            xcodebuild test \
              -project VeloReady.xcodeproj \
              -scheme VeloReady \
              -destination 'platform=iOS Simulator,OS=latest' \
              -only-testing:VeloReadyTests/Unit \
              -quiet \
              -hideShellScriptEnvironment
          fi
            
      - name: Integration Tests
        run: |
          # Try with Test Simulator first, fallback to generic if it doesn't exist
          if xcrun simctl list devices | grep -q "Test Simulator"; then
            echo "Using Test Simulator for integration tests"
            xcodebuild test \
              -project VeloReady.xcodeproj \
              -scheme VeloReady \
              -destination 'platform=iOS Simulator,name=Test Simulator' \
              -only-testing:VeloReadyTests/Integration \
              -quiet \
              -hideShellScriptEnvironment
          else
            echo "Test Simulator not found, using generic destination for integration tests"
            xcodebuild test \
              -project VeloReady.xcodeproj \
              -scheme VeloReady \
              -destination 'platform=iOS Simulator,OS=latest' \
              -only-testing:VeloReadyTests/Integration \
              -quiet \
              -hideShellScriptEnvironment
          fi
            
      - name: E2E Smoke Test
        run: |
          # Only run critical path E2E test
          if [ -f "tests/e2e/scenarios/training-load.yaml" ]; then
            echo "Running E2E smoke test..."
            # This would run Maestro if available
            echo "E2E test would run here (Maestro not available in CI yet)"
          else
            echo "E2E test files not found, skipping"
          fi
          
      - name: Cleanup Simulator
        if: always()
        run: |
          xcrun simctl shutdown "Test Simulator" || true
          xcrun simctl delete "Test Simulator" || true

  # Tier 3: Backend validation (parallel with iOS)
  backend_validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    
    steps:
      - uses: actions/checkout@v4
        with:
          repository: markboulton/veloready-website
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Backend Tests
        run: npm test
        env:
          SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_KEY }}
